/**
 * created 2020-11-11
 *
 * @by fan ou(1329650004@qq.com)
 *
 * Copy right 2020 fan ou
 *
 * a tool java file
 *
 */
package cn;

import brut.androlib.AndrolibException;
import brut.androlib.ApkDecoder;
import brut.directory.DirectoryException;
import Logger.LogFatory;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

public class Utils {

    private static Logger log = LogFatory.getGlobalLogger();

    /**
     * create multi level file dir
     *
     * @param dirPath
     * @return result of operation
     */
    public static boolean createDir(String dirPath) {
        File file = new File(dirPath);
        if (!file.exists()) {
            file.mkdirs();
        }
        return true;
    }

    /**
     * create file
     *
     * @param filePath
     * @return result of operation
     */
    public static boolean createFile(String filePath) {
        File file = new File(filePath);
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
        } catch (IOException e) {
            log.severe(filePath+" create file failed");
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * decode a apk
     *
     * @param apkPath
     * @param decodedApkPath
     * @return if decode apk successfully
     * @throws DirectoryException
     * @throws IOException
     */
    public static synchronized boolean decodeApk(String apkPath, String decodedApkPath) {
        ApkDecoder apkDecoder=new ApkDecoder();
        File file=new File(apkPath);
        // System.out.println("apkPath"+apkPath);
        // System.out.println("decodedApkPath"+decodedApkPath);
        try {
            apkDecoder.setOutDir(new File(decodedApkPath));
        } catch (Exception e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();

        }
        apkDecoder.setApkFile(file);
        try {
            apkDecoder.decode();
        } catch (Exception e) {
            log.severe(apkPath+" decode apk failed");
            e.printStackTrace();

        }
        return true;
    }

    /**
     * find all files endwith keyword or without keyword(keyword == null) in dir
     *
     * @param dir
     * @param keyword
     * @return all files path
     */
    public static List<String> findFilesFromDir(String dir, String keyword) {
        File dirFile = new File(dir);
        List<String> filePathList = new ArrayList<>();
        // add file if dir is a file
        if (dirFile.isFile()) {
            filePathList.add(dirFile.getAbsolutePath());
        }
        File []subFiles = dirFile.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                if (keyword == null) {
                    return true;
                }
                if (pathname.isDirectory()) {
                    return true;
                }
                if (pathname.getName().endsWith(keyword)) {
                    return true;
                }
                return false;
            }
        });
        if (subFiles != null) {
            for (File subFile:subFiles) {
                if (subFile.isDirectory()) {
                    filePathList.addAll(findFilesFromDir(subFile.getAbsolutePath(), keyword));
                } else {
                    filePathList.add(subFile.getAbsolutePath());
                }
            }
        }
        return filePathList;

    }

    /**
     * read file and turn io stream to List
     *
     * @param filePath
     * @return List of lines
     */
    public static synchronized List<String> fileRead(String filePath) {
        String encoding = "UTF-8";
        File file = new File(filePath);

        BufferedReader reader = null;
        List<String> lines = new ArrayList<>();

        int i=0;
        try {
            if(!file.exists()||!file.isFile()) {
                System.out.println(filePath+" is not existed or not a readable file");
                log.severe(filePath+" decode apk failed");
            }
            else {
                // InputStreamReader read=new InputStreamReader(new FileInputStream(file),encoding);
                reader=new BufferedReader(new FileReader(filePath));
                String lineRead=null;

                while((lineRead=reader.readLine())!=null) {

                    lines.add(lineRead);
                    i++;
                }
                reader.close();
            }
        } catch(IOException e) {
            log.severe(filePath+" read file failed");
            e.printStackTrace();
        }
        return lines;
    }

    /**
     * write file and turn io stream to List
     *
     * @param path
     * @param list
     * @param isAdd is add to file
     */
    public static synchronized void writeFile(String path, List<String> list, boolean isAdd) {
        File file = new File(path);
        System.out.println("path:"+path);
        BufferedWriter bw = null;
        int i=0;
        try {
            if(!file.exists()||!file.isFile()) {
                file.createNewFile();
                System.out.println(path+"涓嶅瓨鍦ㄦ垨鑰呮湁閿�");
            }
            // InputStreamReader read=new InputStreamReader(new FileInputStream(file),encoding);
            bw = new BufferedWriter(new FileWriter(path, isAdd));
            String lineRead=null;

            for (String line:list) {
                bw.write(line);
                bw.write("\n");
                i++;
            }

        }
        catch(IOException e) {
            System.out.println("锟侥硷拷锟斤拷取锟斤拷锟斤拷");
            e.printStackTrace();
        }
        try {
            bw.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

}
