/**
 * created 2020-11-11
 *
 * @by fan ou(1329650004@qq.com)
 *
 * Copy right 2020 fan ou
 *
 * File contains attributes of Apk, generate sensitiveApis and permissions and userAction
 *
 */
package cn;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

import brut.directory.DirectoryException;

import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

import java.util.logging.Logger;
import Logger.LogFatory;

/**
 * @by fan ou(1329650004@qq.com)
 *
 * It is a class of messages of Apk
 */
public class ApkClass {

	private String apkName;
	/* path of Apk*/
	private String apkPath;
	/* path of decoded apk*/
	private String decodedApkPath;
	/* List of all callee Api*/
    private Set<String> calleeApiList;
    /* List of all called Api*/
    private Set<String> calledApiList;
	/* List of all dangerous permission*/
	private List<String> permissionList;
	/* List of all user Acion from file*/
	private String[] userActionArray;
	/* List of all user Acion used*/
	private boolean[] userActionFeatureArray;
	/* a apk map to a features*/
	private Features features;

	private int Nmali;
	private int Ntotal;
	private String url;
	private int isMalware;
	private String md5;
	private String size;
	private String version;
	private String risk_num;
	private Date upTime;
	private Date endTime;


	public Set<String> getCalleeApiList() {
		return calleeApiList;
	}

	public void setCalleeApiList(Set<String> calleeApiList) {
		this.calleeApiList = calleeApiList;
	}

	public Set<String> getCalledApiList() {
		return calledApiList;
	}

	public void setCalledApiList(Set<String> calledApiList) {
		this.calledApiList = calledApiList;
	}

	public boolean[] getUserActionFeatureArray() {
		return userActionFeatureArray;
	}

	public void setUserActionFeatureArray(boolean[] userActionFeatureArray) {
		this.userActionFeatureArray = userActionFeatureArray;
	}

	public List<String> getPermissionList() {
        return permissionList;
    }

    public void setPermissionList(List<String> permissionList) {
        this.permissionList = permissionList;
    }

    public Date getUpTime() {
		return upTime;
	}

	public void setUpTime(Date upTime) {
		this.upTime = upTime;
	}

	public Date getEndTime() {
		return endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	public String getMd5() {
		return md5;
	}

	public void setMd5(String md5) {
		this.md5 = md5;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	public String getRisk_num() {
		return risk_num;
	}

	public void setRisk_num(String risk_num) {
		this.risk_num = risk_num;
	}

	public int isMalware() {
		return isMalware;
	}
	public void setMalware(int isMalware) {
		this.isMalware = isMalware;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getApkkName() {
		return apkName;
	}
	public void setApkName(String apkName) {
		apkName = apkName;
	}
	public int getNmali() {
		return Nmali;
	}
	public void setNmali(int nmali) {
		Nmali = nmali;
	}
	public int getNtotal() {
		return Ntotal;
	}
	public void setNtotal(int ntotal) {
		Ntotal = ntotal;
	}

	public Features getFeatures() {
		return features;
	}

	public void setFeatures(Features features) {
		this.features = features;
	}

	private Logger log = LogFatory.getGlobalLogger();


	/**
	 * generate a apk inital arrtributes
	 *
	 * @param apkDirPath
	 * @param apkName
	 * @param saveDirPath
	 * @param isFilterThirdParty
	 * @param saveFeatureFilePath
	 * @param isMalware unkonwn(-1) benign(0) malware(1)
	 */
	public ApkClass(String apkDirPath, String apkName, String saveDirPath, boolean isFilterThirdParty, String saveFeatureFilePath, int isMalware, boolean isAdd) {
		if (apkName.endsWith(".apk")) {
			int index = apkName.lastIndexOf(".apk");
			this.decodedApkPath = saveDirPath + "\\" + apkName.substring(0, index);
		}
		this.apkName = apkName;
		this.apkPath = apkDirPath + "\\" + apkName;
		this.isMalware = isMalware;
		this.calleeApiList = new HashSet<>();
		this.calledApiList = new HashSet<>();
		this.permissionList = new ArrayList<>();
		this.userActionArray = Features.getUserActionArray();
		this.userActionFeatureArray = new boolean[12];
		// decode apk
		decodeApkToSmali();
		// get sensitive api and user Action from decode apk
		getAllCalledSensitiveApi(isFilterThirdParty);
		// get permission from decode apk
		getAllPermission();

		// add to features
		this.features = new Features(this);
		// save features to file
		List<String> featureLineList = new ArrayList<>();
		featureLineList.add(this.features.getFeatureLine());
		Utils.writeFile(saveFeatureFilePath, featureLineList, isAdd);
	}

	/**
	 * decode apk to smali file
	 *
	 * @return if successfully decode apk
	 */
	public boolean decodeApkToSmali() {
		return Utils.decodeApk(this.apkPath, this.decodedApkPath);
	}

	/**
	 * get all sensitive api which is called in a apk
	 *
	 * @param isFilterThirdParty if it is necessary to filter method by third party
	 * @return if successfully get sensitive api from smali file
	 */
	public boolean getAllCalledSensitiveApi(boolean isFilterThirdParty) {
		String dirPath = this.decodedApkPath + "//smali";
		if (!new File(dirPath).exists()) {
			return false;
		}
		List<String> smaliPathList = Utils.findFilesFromDir(dirPath, ".smali");
		// test finded smaliPath
		// testFindedSmaliPath(smaliPathList);

		if (smaliPathList == null || smaliPathList.size() == 0) {
			return false;
		}
		for (String smaliPath:smaliPathList) {
            List<Set<String>> senApiList = getCalledSensitiveApiFromSmali(smaliPath, isFilterThirdParty);
            if (senApiList == null || senApiList.size() != 2) {
                continue;
            }
            this.calledApiList.addAll(senApiList.get(0));
            this.calleeApiList.addAll(senApiList.get(1));
		}
		return true;
	}

	/**
	 * !!!!test-finded smaliPath
	 *
	 */
	public void testFindedSmaliPath(List<String> smaliPathList) {
		for (int i=0;i<smaliPathList.size();i++) {
			log.info("apk:"+this.apkName+" finded smaliPath:"+smaliPathList.get(i));
		}
	}


	/**
	 * get all sensitive api which is called by smali method from one smali file
	 *
	 * @param isFilterThirdParty
	 * @return
	 */
	public List<Set<String>> getCalledSensitiveApiFromSmali(String smaliPath, boolean isFilterThirdParty) {
        List<Set<String>> senApiList = new ArrayList<>();
	    Set<String> calleeApiSmaliList = new HashSet<>();
		Set<String> calledApiSmaliList = new HashSet<>();
		List<String> lines = Utils.fileRead(smaliPath);
		if (lines == null || lines.size() == 0) {
			return null;
		}

		String smaliClass = null;


		for (String line:lines) {
			// filter ""
			line = line.trim();

			// get class
            if (line.startsWith(".class")) {
                String []s = line.split(" ");
                smaliClass = s[s.length - 1];
                // log.info("apk:" + this.apkName + " class:" + smaliClass);
            }
			// get method which is userAction
			if (line.startsWith(".method")) {
				String []splitLineArray = line.split(" ");
				if (smaliClass != null) {
                    String smaliMethod = smaliClass + "->" + splitLineArray[splitLineArray.length - 1];
					// log.info("apk:" + this.apkName + " calleeMethod:" + smaliMethod);
                    calleeApiSmaliList.add(smaliMethod);
                }
				String []splitMethodArray = splitLineArray[splitLineArray.length - 1].split("\\(");
				for (int i=0;i<12;i++) {
					if (splitMethodArray.length > 0 && this.userActionArray[i].equals(splitMethodArray[0])) {
						log.info("apk:" + this.apkName + " userAction to array:" + splitMethodArray[0] + " index:" + i);
						this.userActionFeatureArray[i] = true;
					}
				}

			}

			// get sensitiveApi which is called
			if (line.startsWith("invoke-")) {
				String []s = line.split(" ");
				// sensitiveApi is no need to be filtered by third party
				if (isFilterThirdParty && isMethodThirdParty(s[s.length - 1])) {
					continue;
				}
				// log.info("apk:" + this.apkName + " called:" + s[s.length - 1]);
				calledApiSmaliList.add(s[s.length - 1]);
			}
		}

		senApiList.add(calledApiSmaliList);
		senApiList.add(calleeApiSmaliList);
		return senApiList;
	}

	/**
	 * filter method belong to third party
	 *
	 * @return if method belong to third party
	 */
	public boolean isMethodThirdParty(String method) {
		if (method.startsWith("Ljava/") || method.startsWith("Ljavax/")
			|| method.startsWith("Landroid/") || method.startsWith("Lorg/")) {
			return true;
		}
		return false;
	}

	/**
	 * get permissions from AndroidManifest.xml and from sensitiveApi --- permission
	 *
	 * @return if succeed
	 */
	public boolean getAllPermission() {
		// get permission from AndroidManifest.xml
		getPermissionFromXml(this.decodedApkPath+"//AndroidManifest.xml");

		// get permission from sensitiveApi(have been finded) --- permission of pscout
		getPermissionOfPscoutMap();

		return true;
	}

	/**
	 * parse a xml file and get permissions from it
	 *
	 * @param xmlPath
	 * @return
	 */
	public boolean getPermissionFromXml(String xmlPath) {
		List<String> lines = Utils.fileRead(xmlPath);
		if (lines == null || lines.size() == 0) {
			return false;
		}
		for (String line:lines) {
			line = line.trim();
			if (line.contains("android:name=\"android.permission.")) {
				String []s = line.split(" ");
				for (String splitString:s) {
					if (splitString.startsWith("android:name=\"android.permission.")) {
						int startIndex = splitString.indexOf("\"");
						int endIndex = splitString.lastIndexOf("\"");
						String permission = splitString.substring(startIndex + 1, endIndex);
						if (permission.startsWith("android.permission.")) {
							int dianIndex = permission.lastIndexOf(".");
							permission = permission.substring(dianIndex + 1);
							log.info("apk:" + this.apkName + " find permission from xml:" + permission);
							this.permissionList.add(permission);
						} else {
							log.info("apk:"+this.apkName+" find wrong permission permission:" + permission +" line:"+ line);
						}
						break;
					}
				}
			}
		}
		return true;

	}

	/**
	 * get permissions from map of sensitiveApi to permission by sensitiveApis which have been found
	 *
	 * @return if successfully get permissions from map relationship
	 */
	public boolean getPermissionOfPscoutMap() {
		Map<String, String> sensitiveApiToPermissionMap = PublicData.getSensitiveApiToPermissionMapMap();
		for (String sensitiveApi:this.calleeApiList) {
			String permission = sensitiveApiToPermissionMap.get(sensitiveApi);
			if (permission != null) {
				log.info("apk:" + this.apkName + "senApi:"+ sensitiveApi +" find permission from pscout:" + permission);
				this.permissionList.add(permission);
			}

		}
		return true;
	}


}
